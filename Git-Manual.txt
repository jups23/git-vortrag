Ein Arbeitstag mit git

(1a) Ein neues remote repository laden
    $ git clone <repo_url> || <path/to/repo>
    $ git clone http://github.com/jups23/git-vortrag

(1b) Ein neues lokales repository anlegen und (alle) Dateien in git hinzufügen
    $ git init
    $ git add <file_name>    #Nur im aktuellen Ordner (bzw. tiefer) möglich
    $ git add -A             #fügt alle Dateien hinzu; $ git add . auch möglich
	
(2) Eine Änderung an git übergeben
    $ git commit  <file name>  #nur bestimmte Datei(en), Texteditor für message
    $ git commit -am "Meine commit message" #-a commit mit allen Dateien
                                            #-m "..." commit message vom Terminal

(3) Einen branch anlegen
    $ git branch <branch_name>    #weiter siehe (4), ((5) beachten)

(4) Zu eine bestimmte Version wechseln (commit, branch etc. möglich!) ((5) beachten)
    (4a) $ git checkout <SHA1-Hash des commits>    # die ersten vier Zeichen reichen
         $ git checkout a354c
    (4b) $ git checkout <branch_name>              # in bestimmten branch wechseln

(5) "Working directory dirty" oder "please commit or stash changes to ..." WTF? (siehe [1])
    $ git stash    # legt uncommited Änderungen auf einen Zwischenspeicher (Stack)
                   # normal weiter arbeiten, jetzt branch und checkout möglich
    $ git stash apply stash    # Änderungen aus dem stash auf aktuellen Zustand anwenden
    $ git stash clear    #alles stashes löschen

(6) Zwei branches zusammenführen == merge
    (6.1) $ git merge <anderer branch>    # merge in aktuellen branch
    (6.2) $ git mergetool    # falls Konflikte, geht auch mit Binärdateien!
   
(7) Die Versionsgeschichte ändern
    (7a) $ git commit --amend    # commit message ändern, mit -m"..." im Terminal
    (7b) $ git add <file> && $ git commit --amend    # noch Datei/Änderung hinzufügen
    (7c.1) $ git rebase <SHA1 commit>~<Anzahl der zu ändernden commits>
           $ git rebase a63f4~10    # lässt von a63f4 die letzten 10 commits ändern
    (7c.2) Im Editor: commit messages ändern, commits zusammenfassen, commits löschen
    (7c.3.1) Speichern, Editor schließen    #fertig!
        (6c.3.2) $git commit --amend # nur falls ein commit ähnlich wie in 6a oder 6b editiert werden soll

(8) Einen commit taggen
    $ git tag <tag name> <SHA1 commit> || -F <file name>   #taggt commit || file
    $ git tag test    # taggt letzten commit mit "test"

(9) Lokale Versionsgeschichte in ein remote repository einfügen
    (9.1) $ git remote add <alias> <url>   #Kürzel für remote repo hinzufügen 
          $ git remote add cloud git@github.com:jups23/git-vortrag.git
    (9.2) $ git push <alias> <branch>
          $ git push cloud master

(10) Änderungen von einem remote repository in das lokale ziehen
    (10.1) git branch cloud-temp        # legt temporären branch an (siehe 3)
    (10.2) git pull cloud cloud-temp    # merge von cloud in lokalen temp branch
    (10.3) git checkout cloud-temp      # Test möglich, ob Änderungen okay sind (siehe 5)
    (10.4) git merge master cloud-temp  # Übernehmen der Änderungen


(!) Sinnvolle Einstellungen
$ open ~/.gitconfig    #dann copy & paste mit meinem Beispiel-gitconfig, zu finden in http://github.com/jups23/git-vortrag/blob/master/.gitconfig

(!!) Nützlicher Helfer
http://github.com/visionmedia/git-extras fügt praktische git Befehle hinzu 
z.B. $ git setup, $ git changelog 

(?) git Hilfe, nach Qualität und Praxisrelevanz sortiert
$ git <command> --help
http://help.github.com/
http://www-cs-students.stanford.edu/~blynn/gitmagic/ch02.html
https://git.wiki.kernel.org/index.php/GitFaq
http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
[1] http://ariejan.net/2008/04/23/git-using-the-stash/